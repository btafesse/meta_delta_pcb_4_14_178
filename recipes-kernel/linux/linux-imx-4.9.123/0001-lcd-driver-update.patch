From cc9d978b1300056c76f1b4e8f4002558bfd8c7f8 Mon Sep 17 00:00:00 2001
From: btafesse <btafesse@mpr.com>
Date: Wed, 20 Feb 2019 20:39:29 -0500
Subject: [PATCH] lcd driver update

---
 drivers/gpu/drm/panel/panel-raydium-rm67191.c | 719 ++++++++++++--------------
 1 file changed, 344 insertions(+), 375 deletions(-)

diff --git a/drivers/gpu/drm/panel/panel-raydium-rm67191.c b/drivers/gpu/drm/panel/panel-raydium-rm67191.c
index 940f780..0c0abb1 100644
--- a/drivers/gpu/drm/panel/panel-raydium-rm67191.c
+++ b/drivers/gpu/drm/panel/panel-raydium-rm67191.c
@@ -25,163 +25,11 @@
 #include <video/of_videomode.h>
 #include <video/videomode.h>
 
-#define CMD_TABLE_LEN 2
-typedef u8 cmd_set_table[CMD_TABLE_LEN];
-
-/* Write Manufacture Command Set Control */
-#define WRMAUCCTR 0xFE
-
-/* Manufacturer Command Set pages (CMD2) */
-static const cmd_set_table manufacturer_cmd_set[] = {
-	{0xFE, 0x0B},
-	{0x28, 0x40},
-	{0x29, 0x4F},
-	{0xFE, 0x0E},
-	{0x4B, 0x00},
-	{0x4C, 0x0F},
-	{0x4D, 0x20},
-	{0x4E, 0x40},
-	{0x4F, 0x60},
-	{0x50, 0xA0},
-	{0x51, 0xC0},
-	{0x52, 0xE0},
-	{0x53, 0xFF},
-	{0xFE, 0x0D},
-	{0x18, 0x08},
-	{0x42, 0x00},
-	{0x08, 0x41},
-	{0x46, 0x02},
-	{0x72, 0x09},
-	{0xFE, 0x0A},
-	{0x24, 0x17},
-	{0x04, 0x07},
-	{0x1A, 0x0C},
-	{0x0F, 0x44},
-	{0xFE, 0x04},
-	{0x00, 0x0C},
-	{0x05, 0x08},
-	{0x06, 0x08},
-	{0x08, 0x08},
-	{0x09, 0x08},
-	{0x0A, 0xE6},
-	{0x0B, 0x8C},
-	{0x1A, 0x12},
-	{0x1E, 0xE0},
-	{0x29, 0x93},
-	{0x2A, 0x93},
-	{0x2F, 0x02},
-	{0x31, 0x02},
-	{0x33, 0x05},
-	{0x37, 0x2D},
-	{0x38, 0x2D},
-	{0x3A, 0x1E},
-	{0x3B, 0x1E},
-	{0x3D, 0x27},
-	{0x3F, 0x80},
-	{0x40, 0x40},
-	{0x41, 0xE0},
-	{0x4F, 0x2F},
-	{0x50, 0x1E},
-	{0xFE, 0x06},
-	{0x00, 0xCC},
-	{0x05, 0x05},
-	{0x07, 0xA2},
-	{0x08, 0xCC},
-	{0x0D, 0x03},
-	{0x0F, 0xA2},
-	{0x32, 0xCC},
-	{0x37, 0x05},
-	{0x39, 0x83},
-	{0x3A, 0xCC},
-	{0x41, 0x04},
-	{0x43, 0x83},
-	{0x44, 0xCC},
-	{0x49, 0x05},
-	{0x4B, 0xA2},
-	{0x4C, 0xCC},
-	{0x51, 0x03},
-	{0x53, 0xA2},
-	{0x75, 0xCC},
-	{0x7A, 0x03},
-	{0x7C, 0x83},
-	{0x7D, 0xCC},
-	{0x82, 0x02},
-	{0x84, 0x83},
-	{0x85, 0xEC},
-	{0x86, 0x0F},
-	{0x87, 0xFF},
-	{0x88, 0x00},
-	{0x8A, 0x02},
-	{0x8C, 0xA2},
-	{0x8D, 0xEA},
-	{0x8E, 0x01},
-	{0x8F, 0xE8},
-	{0xFE, 0x06},
-	{0x90, 0x0A},
-	{0x92, 0x06},
-	{0x93, 0xA0},
-	{0x94, 0xA8},
-	{0x95, 0xEC},
-	{0x96, 0x0F},
-	{0x97, 0xFF},
-	{0x98, 0x00},
-	{0x9A, 0x02},
-	{0x9C, 0xA2},
-	{0xAC, 0x04},
-	{0xFE, 0x06},
-	{0xB1, 0x12},
-	{0xB2, 0x17},
-	{0xB3, 0x17},
-	{0xB4, 0x17},
-	{0xB5, 0x17},
-	{0xB6, 0x11},
-	{0xB7, 0x08},
-	{0xB8, 0x09},
-	{0xB9, 0x06},
-	{0xBA, 0x07},
-	{0xBB, 0x17},
-	{0xBC, 0x17},
-	{0xBD, 0x17},
-	{0xBE, 0x17},
-	{0xBF, 0x17},
-	{0xC0, 0x17},
-	{0xC1, 0x17},
-	{0xC2, 0x17},
-	{0xC3, 0x17},
-	{0xC4, 0x0F},
-	{0xC5, 0x0E},
-	{0xC6, 0x00},
-	{0xC7, 0x01},
-	{0xC8, 0x10},
-	{0xFE, 0x06},
-	{0x95, 0xEC},
-	{0x8D, 0xEE},
-	{0x44, 0xEC},
-	{0x4C, 0xEC},
-	{0x32, 0xEC},
-	{0x3A, 0xEC},
-	{0x7D, 0xEC},
-	{0x75, 0xEC},
-	{0x00, 0xEC},
-	{0x08, 0xEC},
-	{0x85, 0xEC},
-	{0xA6, 0x21},
-	{0xA7, 0x05},
-	{0xA9, 0x06},
-	{0x82, 0x06},
-	{0x41, 0x06},
-	{0x7A, 0x07},
-	{0x37, 0x07},
-	{0x05, 0x06},
-	{0x49, 0x06},
-	{0x0D, 0x04},
-	{0x51, 0x04},
-};
+
+
 
 static const u32 rad_bus_formats[] = {
-	MEDIA_BUS_FMT_RGB888_1X24,
-	MEDIA_BUS_FMT_RGB666_1X18,
-	MEDIA_BUS_FMT_RGB565_1X16,
+	MEDIA_BUS_FMT_RGB888_1X24
 };
 
 struct rad_panel {
@@ -190,6 +38,7 @@ struct rad_panel {
 
 	struct gpio_desc *reset;
 	struct backlight_device *backlight;
+	struct gpio_desc *backlight_gpio;
 
 	bool prepared;
 	bool enabled;
@@ -204,154 +53,302 @@ static inline struct rad_panel *to_rad_panel(struct drm_panel *panel)
 	return container_of(panel, struct rad_panel, base);
 }
 
-static int rad_panel_push_cmd_list(struct mipi_dsi_device *dsi)
+
+
+///////////////////////////////////////////////////
+//  _____  ____  _____  _____  _________  
+// |_   _||_   \|_   _||_   _||  _   _  | 
+//   | |    |   \ | |    | |  |_/ | | \_| 
+//   | |    | |\ \| |    | |      | |     
+//  _| |_  _| |_\   |_  _| |_    _| |_    
+// |_____||_____|\____||_____|  |_____|   
+//////////////////////////////////////////////////
+static int rad_panel_push_init_cmd(struct mipi_dsi_device *dsi)
 {
-	size_t i;
-	const u8 *cmd;
-	size_t count = sizeof(manufacturer_cmd_set) / CMD_TABLE_LEN;
 	int ret = 0;
 
-	for (i = 0; i < count ; i++) {
-		cmd = manufacturer_cmd_set[i];
-		ret = mipi_dsi_generic_write(dsi, cmd, CMD_TABLE_LEN);
-		if (ret < 0)
-			return ret;
+	//0xB9 - SETEXTC		
+	static const u8 setextc_settings[] = { 0xF1, 0x08, 0x00 };
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xB9,
+			  				setextc_settings, 
+			  				ARRAY_SIZE(setextc_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setextc \n");
+		return ret;
 	}
 
-	return ret;
-};
-
-static int color_format_from_dsi_format(enum mipi_dsi_pixel_format format)
-{
-	switch (format) {
-	case MIPI_DSI_FMT_RGB565:
-		return 0x55;
-	case MIPI_DSI_FMT_RGB666:
-	case MIPI_DSI_FMT_RGB666_PACKED:
-		return 0x66;
-	case MIPI_DSI_FMT_RGB888:
-		return 0x77;
-	default:
-		return 0x77; /* for backward compatibility */
+	//0xC6 SETTEST
+	static const u8 settest_settings[] = { 0x00, 0x00, 0xFD };
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xC6,
+			  				settest_settings, 
+			  				ARRAY_SIZE(settest_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send settest \n");
+		return ret;
+	}	
+
+	//0xCC SETPANEL
+	static const u8 setpanel_settings[] = { 0x02 };
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xCC,
+			  				setpanel_settings, 
+			  				ARRAY_SIZE(setpanel_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setpanel \n");
+		return ret;
 	}
-};
 
-static int rad_panel_prepare(struct drm_panel *panel)
-{
-	struct rad_panel *rad = to_rad_panel(panel);
-
-	if (rad->prepared)
-		return 0;
-
-	if (rad->reset != NULL) {
-		gpiod_set_value(rad->reset, 0);
-		usleep_range(5000, 10000);
-		gpiod_set_value(rad->reset, 1);
-		usleep_range(20000, 25000);
+	//0xB2 SETDISP
+	// - 480x800 Resolution
+	// Hi-Z for non-display area source output control
+	static const u8 setdisplay_settings[] = { 0x23 };
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xB2,
+			  				setdisplay_settings, 
+			  				ARRAY_SIZE(setdisplay_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setdisplay_settings \n");
+		return ret;
 	}
 
-	rad->prepared = true;
-
-	return 0;
-}
+	//0xB4 SETCYC
+	// 2-dot inversion
+	static const u8 setcyc_settings[] = { 0x02 };
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xB4,
+			  				setcyc_settings, 
+			  				ARRAY_SIZE(setcyc_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setcyc_settings \n");
+		return ret;
+	}
 
-static int rad_panel_unprepare(struct drm_panel *panel)
-{
-	struct rad_panel *rad = to_rad_panel(panel);
-	struct device *dev = &rad->dsi->dev;
+	//0xB3 SETRGBIF
+	// MIPI_DSI_FMT_RGB666 - loose, lsb oriented
+	// PCLK Polarity Selection - Rising edge latch data
+	// HSYNC Polarity Selection - Low Level
+	// VSYNC Polarity Selection - Low Level
+	// DE Polarity Selection - High Levevel
+	// HBP - 6
+	// VBP - 6
+	// RGB MODE (VS+HS+DE)
+	// VBP_RGB_GEN - 8
+	// VFP_RGB_GEN - 8
+	static const u8 setrgbif_settings[] = { 0x01, 0x00, 0x06, 0x06, 0x08, 0x08, 0x20, 0x20 };
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xB3,
+			  				setrgbif_settings, 
+			  				ARRAY_SIZE(setrgbif_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setrgbif_settings \n");
+		return ret;
+	}
 
-	if (!rad->prepared)
-		return 0;
+	//0xB6 SETVCOM
+	static const u8 setrvcom_settings[] = { 0x3C, 0x3C };
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xB6,
+			  				setrvcom_settings, 
+			  				ARRAY_SIZE(setrvcom_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setrvcom_settings \n");
+		return ret;
+	}
 
-	if (rad->enabled) {
-		DRM_DEV_ERROR(dev, "Panel still enabled!\n");
-		return -EPERM;
+	//0xB5 SETBGP
+	static const u8 setbgp_settings[] = { 0x05, 0x05 };
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xB5,
+			  				setbgp_settings, 
+			  				ARRAY_SIZE(setbgp_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setbgp_settings \n");
+		return ret;
 	}
 
-	if (rad->reset != NULL) {
-		gpiod_set_value(rad->reset, 0);
-		usleep_range(15000, 17000);
-		gpiod_set_value(rad->reset, 1);
+	//0xB1 SETPOWER
+	static const u8 setpower_settings[] = { 0x22, 0x12, 0x12, 0xBB, 0x33, 0x01, 0x88, 0x20 };
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xB1,
+			  				setpower_settings, 
+			  				ARRAY_SIZE(setpower_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setpower_settings \n");
+		return ret;
 	}
 
-	rad->prepared = false;
+	//0xBA SETMIPI
+	// virtual channel 0
+	// 2 lane
+	// 1.7V MIPI LDO Voltage TODO: EXPLORE This at 1.8 (C2 to E2)
+	// 100 ohm terminal resistance
+	// LPTX speed select x1/4
+	static const u8 setmipi_settings[] = { 0x31, 0x00, 0x44, 0x25, 0x91, 0x0A, 0x00, 0x00, 
+										  0xC2, 0x34, 0x00, 0x00, 0x04, 0x02, 0x1D, 0xB9, 
+										  0xEE, 0x40};
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xBA,
+			  				setmipi_settings, 
+			  				ARRAY_SIZE(setmipi_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setmipi_settings \n");
+		return ret;
+	}	
+
+	//0xE3 SETEQ
+	static const u8 seteq_settings[] = { 0x09, 0x09, 0x01, 0x01 };
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xE3,
+			  				seteq_settings, 
+			  				ARRAY_SIZE(seteq_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send seteq_settings \n");
+		return ret;
+	}	
+
+	//0xB8 SETPOWER_EXT
+	// VCSW1/VCS2 frequenc is 1/6 Hsync
+	// Soft start time 15ms
+	static const u8 setpower_ex_settings[] = { 0x06, 0x22 };
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xB8,
+			  				setpower_ex_settings, 
+			  				ARRAY_SIZE(setpower_ex_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setpower_ex_settings \n");
+		return ret;
+	}	
+
+	//0xBC SETVDC
+	// NVDDD - -1.9V
+	// VDDD - 2.0V
+	static const u8 setvdc_settings[] = { 0x67 };
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xBC,
+			  				setvdc_settings, 
+			  				ARRAY_SIZE(setvdc_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setvdc_settings \n");
+		return ret;
+	}	
+
+	//0xC0 SETSCR
+	static const u8 setscr_settings[] = { 0x73, 0x50, 0x00, 0x08, 0x70 };
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xC0,
+			  				setscr_settings, 
+			  				ARRAY_SIZE(setscr_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setscr_settings \n");
+		return ret;
+	}	
+
+	//0xE9 SETGIP1
+	static const u8 setgip1_settings[] = { 
+		0x00, 0x00, 0x03, 0x00, 
+		0x00, 0x05, 0x80, 0x12,
+		0x30, 0x00, 0x18, 0x04,
+		0x05, 0x80, 0x13, 0x00,
+		0x03, 0x00, 0x00, 0x00,
+		0x00, 0x20, 0x88, 0x88,
+		0x88, 0x88, 0x00, 0x00,
+		0x22, 0x88, 0x88, 0x88, 
+		0x88, 0x88, 0x88, 0x11, 
+		0x11, 0x33, 0x88, 0x88,
+		0x00, 0x00, 0x00, 0x00,
+		0x00, 0x00, 0x00, 0x00,
+		0x00, 0x00, 0x00
+		 };
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xE9,
+			  				setgip1_settings, 
+			  				ARRAY_SIZE(setgip1_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setgip1_settings \n");
+		return ret;
+	}	
+
+
+	//0xEA SETGIP2
+	static const u8 setgip2_settings[] = { 
+		0x88, 0x88, 0x88, 0x88,
+		0x11, 0x33, 0x11, 0x88,
+		0x88, 0x88, 0x88, 0x88,
+		0x88, 0x00, 0x22, 0x00,
+		0x88, 0x88, 0x00, 0x00,
+		0x00, 0xFF, 0x00, 0x04,
+		0x44, 0x00, 0x00, 0x00,
+		0x00, 0x00, 0x00, 0x00,
+		0x00, 0x00, 0x00, 0x00 
+		};
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xEA,
+			  				setgip2_settings, 
+			  				ARRAY_SIZE(setgip2_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setgip2_settings \n");
+		return ret;
+	}	
+
+
+	//0xE0 SETGAMMA
+	static const u8 setgamma_settings[] = { 
+		0x00, 0x00, 0x03, 0x3C,
+		0x3F, 0x7F, 0x14, 0x3D,
+		0x06, 0x0A, 0x0E, 0x12,
+		0x15, 0x13, 0x14, 0x0C,
+		0x0A, 0x00, 0x00, 0x03,
+		0x3C, 0x3F, 0x7F, 0x14,
+		0x3D, 0x06, 0x0A, 0x0E,
+		0x12, 0x15, 0x13, 0x14,
+		0x0C, 0x0A 
+		};
+	ret = mipi_dsi_dcs_write(dsi, 
+							0xE0,
+			  				setgamma_settings, 
+			  				ARRAY_SIZE(setgamma_settings));
+	if (ret < 0) { 
+		pr_info("display - failed to send setgamma_settings \n");
+		return ret;
+	}
 
-	return 0;
+	return ret;
 }
 
-static int rad_panel_enable(struct drm_panel *panel)
+
+
+static int rad_panel_prepare(struct drm_panel *panel)
 {
 	struct rad_panel *rad = to_rad_panel(panel);
 	struct mipi_dsi_device *dsi = rad->dsi;
 	struct device *dev = &dsi->dev;
-	int color_format = color_format_from_dsi_format(dsi->format);
-	u16 brightness;
+	
 	int ret;
 
-	if (rad->enabled)
+	if (rad->prepared)
 		return 0;
 
-	if (!rad->prepared) {
-		DRM_DEV_ERROR(dev, "Panel not prepared!\n");
-		return -EPERM;
-	}
-
-	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+	DRM_DEV_DEBUG_DRIVER(dev, "\n");
 
-	ret = rad_panel_push_cmd_list(dsi);
-	if (ret < 0) {
-		DRM_DEV_ERROR(dev, "Failed to send MCS (%d)\n", ret);
-		goto fail;
+	if (rad->reset != NULL) {
+		gpiod_set_value(rad->reset, 1);
+		usleep_range(10000, 15000);
+		gpiod_set_value(rad->reset, 0);
+		usleep_range(500, 1000);
+		gpiod_set_value(rad->reset, 1);
+		usleep_range(20000, 25000);
 	}
 
-	/* Select User Command Set table (CMD1) */
-	ret = mipi_dsi_generic_write(dsi, (u8[]){ WRMAUCCTR, 0x00 }, 2);
-	if (ret < 0)
-		goto fail;
+	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
 
-	/* Software reset */
-	ret = mipi_dsi_dcs_soft_reset(dsi);
+	ret = rad_panel_push_init_cmd(dsi);
 	if (ret < 0) {
-		DRM_DEV_ERROR(dev, "Failed to do Software Reset (%d)\n", ret);
+		pr_info("display  Failed to send init commands (%d)\n", ret);
 		goto fail;
 	}
 
-	usleep_range(10000, 15000);
-
-	/* Set DSI mode */
-	ret = mipi_dsi_generic_write(dsi, (u8[]){ 0xC2, 0x0B }, 2);
-	if (ret < 0) {
-		DRM_DEV_ERROR(dev, "Failed to set DSI mode (%d)\n", ret);
-		goto fail;
-	}
-	/* Set tear ON */
-	ret = mipi_dsi_dcs_set_tear_on(dsi, MIPI_DSI_DCS_TEAR_MODE_VBLANK);
-	if (ret < 0) {
-		DRM_DEV_ERROR(dev, "Failed to set tear ON (%d)\n", ret);
-		goto fail;
-	}
-	/* Set tear scanline */
-	ret = mipi_dsi_dcs_set_tear_scanline(dsi, 0x380);
-	if (ret < 0) {
-		DRM_DEV_ERROR(dev, "Failed to set tear scanline (%d)\n", ret);
-		goto fail;
-	}
-	/* Set pixel format */
-	ret = mipi_dsi_dcs_set_pixel_format(dsi, color_format);
-	DRM_DEV_DEBUG_DRIVER(dev, "Interface color format set to 0x%x\n",
-				color_format);
-	if (ret < 0) {
-		DRM_DEV_ERROR(dev, "Failed to set pixel format (%d)\n", ret);
-		goto fail;
-	}
-	/* Set display brightness */
-	brightness = rad->backlight->props.brightness;
-	ret = mipi_dsi_dcs_set_display_brightness(dsi, brightness);
-	if (ret < 0) {
-		DRM_DEV_ERROR(dev, "Failed to set display brightness (%d)\n",
-			      ret);
-		goto fail;
-	}
 	/* Exit sleep mode */
 	ret = mipi_dsi_dcs_exit_sleep_mode(dsi);
 	if (ret < 0) {
@@ -359,7 +356,7 @@ static int rad_panel_enable(struct drm_panel *panel)
 		goto fail;
 	}
 
-	usleep_range(5000, 10000);
+	usleep_range(120000, 130000);
 
 	ret = mipi_dsi_dcs_set_display_on(dsi);
 	if (ret < 0) {
@@ -367,10 +364,7 @@ static int rad_panel_enable(struct drm_panel *panel)
 		goto fail;
 	}
 
-	rad->backlight->props.power = FB_BLANK_UNBLANK;
-	backlight_update_status(rad->backlight);
-
-	rad->enabled = true;
+	rad->prepared = true;
 
 	return 0;
 
@@ -381,36 +375,70 @@ static int rad_panel_enable(struct drm_panel *panel)
 	return ret;
 }
 
-static int rad_panel_disable(struct drm_panel *panel)
+static int rad_panel_unprepare(struct drm_panel *panel)
 {
 	struct rad_panel *rad = to_rad_panel(panel);
 	struct mipi_dsi_device *dsi = rad->dsi;
 	struct device *dev = &dsi->dev;
 	int ret;
 
-	if (!rad->enabled)
+	if (!rad->prepared)
 		return 0;
 
+	DRM_DEV_DEBUG_DRIVER(dev, "\n");
+
 	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
 
 	ret = mipi_dsi_dcs_set_display_off(dsi);
-	if (ret < 0) {
+	if (ret < 0)
 		DRM_DEV_ERROR(dev, "Failed to set display OFF (%d)\n", ret);
-		return ret;
-	}
 
 	usleep_range(5000, 10000);
 
 	ret = mipi_dsi_dcs_enter_sleep_mode(dsi);
-	if (ret < 0) {
+	if (ret < 0)
 		DRM_DEV_ERROR(dev, "Failed to enter sleep mode (%d)\n", ret);
-		return ret;
-	}
 
 	usleep_range(10000, 15000);
 
-	rad->backlight->props.power = FB_BLANK_POWERDOWN;
-	backlight_update_status(rad->backlight);
+	if (rad->reset != NULL) {
+		gpiod_set_value(rad->reset, 0);
+		usleep_range(10000, 15000);
+	}
+
+	rad->prepared = false;
+
+	return 0;
+}
+
+static int rad_panel_enable(struct drm_panel *panel)
+{
+	struct rad_panel *rad = to_rad_panel(panel);
+	struct device *dev = &rad->dsi->dev;
+
+	if (rad->enabled)
+		return 0;
+
+	DRM_DEV_DEBUG_DRIVER(dev, "\n");
+
+	pr_info("Display Enabled \n");
+
+	rad->enabled = true;
+
+	return 0;
+}
+
+static int rad_panel_disable(struct drm_panel *panel)
+{
+	struct rad_panel *rad = to_rad_panel(panel);
+	struct device *dev = &rad->dsi->dev;
+
+	if (!rad->enabled)
+		return 0;
+
+	DRM_DEV_DEBUG_DRIVER(dev, "\n");
+
+	pr_info("Display Disabled \n");
 
 	rad->enabled = false;
 
@@ -425,7 +453,7 @@ static int rad_panel_get_modes(struct drm_panel *panel)
 	struct drm_display_mode *mode;
 	u32 *bus_flags = &connector->display_info.bus_flags;
 	int ret;
-
+	pr_info("Display mode requested \n");
 	mode = drm_mode_create(connector->dev);
 	if (!mode) {
 		DRM_DEV_ERROR(dev, "Failed to create display mode!\n");
@@ -458,55 +486,13 @@ static int rad_panel_get_modes(struct drm_panel *panel)
 	return 1;
 }
 
-static int rad_bl_get_brightness(struct backlight_device *bl)
-{
-	struct mipi_dsi_device *dsi = bl_get_data(bl);
-	struct rad_panel *rad = mipi_dsi_get_drvdata(dsi);
-	struct device *dev = &dsi->dev;
-	u16 brightness;
-	int ret;
-
-	if (!rad->prepared)
-		return 0;
-
-	DRM_DEV_DEBUG_DRIVER(dev, "\n");
-
-	dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
-
-	ret = mipi_dsi_dcs_get_display_brightness(dsi, &brightness);
-	if (ret < 0)
-		return ret;
-
-	bl->props.brightness = brightness;
-
-	return brightness & 0xff;
-}
-
-static int rad_bl_update_status(struct backlight_device *bl)
-{
-	struct mipi_dsi_device *dsi = bl_get_data(bl);
-	struct rad_panel *rad = mipi_dsi_get_drvdata(dsi);
-	struct device *dev = &dsi->dev;
-	int ret = 0;
-
-	if (!rad->prepared)
-		return 0;
-
-	DRM_DEV_DEBUG_DRIVER(dev, "New brightness: %d\n", bl->props.brightness);
-
-	dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
-
-	ret = mipi_dsi_dcs_set_display_brightness(dsi, bl->props.brightness);
-	if (ret < 0)
-		return ret;
 
-	return 0;
-}
 
+/*
 static const struct backlight_ops rad_bl_ops = {
 	.update_status = rad_bl_update_status,
 	.get_brightness = rad_bl_get_brightness,
-};
+};*/
 
 static const struct drm_panel_funcs rad_panel_funcs = {
 	.prepare = rad_panel_prepare,
@@ -521,19 +507,19 @@ static const struct drm_panel_funcs rad_panel_funcs = {
  * to 132MHz (60Hz refresh rate)
  */
 static const struct display_timing rad_default_timing = {
-	.pixelclock = { 66000000, 132000000, 132000000 },
-	.hactive = { 1080, 1080, 1080 },
-	.hfront_porch = { 20, 20, 20 },
-	.hsync_len = { 2, 2, 2 },
-	.hback_porch = { 34, 34, 34 },
-	.vactive = { 1920, 1920, 1920 },
+	.pixelclock = { 12000000, 24000000, 24000000 },
+	.hactive = { 480, 480, 480 },
+	.hfront_porch = { 1, 1, 1 },
+	.hsync_len = { 1, 1, 1 },
+	.hback_porch = { 3, 3, 3 },
+	.vactive = { 800, 800, 800 },
 	.vfront_porch = { 10, 10, 10 },
-	.vsync_len = { 2, 2, 2 },
-	.vback_porch = { 4, 4, 4 },
+	.vsync_len = { 5, 5, 5 },
+	.vback_porch = { 0, 0, 0 },
 	.flags = DISPLAY_FLAGS_HSYNC_LOW |
 		 DISPLAY_FLAGS_VSYNC_LOW |
-		 DISPLAY_FLAGS_DE_LOW |
-		 DISPLAY_FLAGS_PIXDATA_NEGEDGE,
+		 DISPLAY_FLAGS_DE_HIGH |
+		 DISPLAY_FLAGS_PIXDATA_POSEDGE,
 };
 
 static int rad_panel_probe(struct mipi_dsi_device *dsi)
@@ -542,9 +528,10 @@ static int rad_panel_probe(struct mipi_dsi_device *dsi)
 	struct device_node *np = dev->of_node;
 	struct device_node *timings;
 	struct rad_panel *panel;
-	struct backlight_properties bl_props;
+	//struct backlight_properties bl_props;
 	int ret;
-	u32 video_mode;
+	
+	pr_info("Display - MPR init started \n");
 
 	panel = devm_kzalloc(&dsi->dev, sizeof(*panel), GFP_KERNEL);
 	if (!panel)
@@ -558,27 +545,6 @@ static int rad_panel_probe(struct mipi_dsi_device *dsi)
 	dsi->mode_flags =  MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO |
 			   MIPI_DSI_CLOCK_NON_CONTINUOUS;
 
-	ret = of_property_read_u32(np, "video-mode", &video_mode);
-	if (!ret) {
-		switch (video_mode) {
-		case 0:
-			/* burst mode */
-			dsi->mode_flags |= MIPI_DSI_MODE_VIDEO_BURST;
-			break;
-		case 1:
-			/* non-burst mode with sync event */
-			break;
-		case 2:
-			/* non-burst mode with sync pulse */
-			dsi->mode_flags |= MIPI_DSI_MODE_VIDEO_SYNC_PULSE;
-			break;
-		default:
-			dev_warn(dev, "invalid video mode %d\n", video_mode);
-			break;
-
-		}
-	}
-
 	ret = of_property_read_u32(np, "dsi-lanes", &dsi->lanes);
 	if (ret < 0) {
 		dev_err(dev, "Failed to get dsi-lanes property (%d)\n", ret);
@@ -611,20 +577,15 @@ static int rad_panel_probe(struct mipi_dsi_device *dsi)
 		gpiod_set_value(panel->reset, 0);
 
 
-	memset(&bl_props, 0, sizeof(bl_props));
-	bl_props.type = BACKLIGHT_RAW;
-	bl_props.brightness = 255;
-	bl_props.max_brightness = 255;
+	panel->backlight_gpio = devm_gpiod_get(dev, "backlight", GPIOD_OUT_HIGH);
+
+	if (IS_ERR(panel->backlight_gpio))
+		panel->backlight_gpio = NULL;
+	else
+		gpiod_set_value(panel->backlight_gpio, 1);
+
+
 
-	panel->backlight = devm_backlight_device_register(
-				dev, dev_name(dev),
-				dev, dsi,
-				&rad_bl_ops, &bl_props);
-	if (IS_ERR(panel->backlight)) {
-		ret = PTR_ERR(panel->backlight);
-		dev_err(dev, "Failed to register backlight (%d)\n", ret);
-		return ret;
-	}
 
 	drm_panel_init(&panel->base);
 	panel->base.funcs = &rad_panel_funcs;
@@ -639,6 +600,8 @@ static int rad_panel_probe(struct mipi_dsi_device *dsi)
 	if (ret < 0)
 		drm_panel_remove(&panel->base);
 
+	pr_info("Display - MPR init sucessful \n");
+
 	return ret;
 }
 
@@ -648,6 +611,12 @@ static int rad_panel_remove(struct mipi_dsi_device *dsi)
 	struct device *dev = &dsi->dev;
 	int ret;
 
+	pr_info("Display - MPR removed \n");
+	ret = rad_panel_unprepare(&rad->base);
+	ret |= rad_panel_disable(&rad->base);
+	if (ret < 0)
+		DRM_DEV_ERROR(dev, "Failed to disable panel (%d)\n", ret);
+
 	ret = mipi_dsi_detach(dsi);
 	if (ret < 0)
 		DRM_DEV_ERROR(dev, "Failed to detach from host (%d)\n",
@@ -665,8 +634,8 @@ static void rad_panel_shutdown(struct mipi_dsi_device *dsi)
 {
 	struct rad_panel *rad = mipi_dsi_get_drvdata(dsi);
 
-	rad_panel_disable(&rad->base);
 	rad_panel_unprepare(&rad->base);
+	rad_panel_disable(&rad->base);
 }
 
 static const struct of_device_id rad_of_match[] = {
-- 
2.7.4

